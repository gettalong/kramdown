#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
#--
# Copyright (C) 2009 Thomas Leitner <t_leitner@gmx.at>
#
# This file is part of kramdown.
#
# kramdown is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#++
#

require 'optparse'
require 'kramdown'

options = {}
format = 'html'
OptionParser.new do |opts|
  opts.banner = "Usage: kramdown [options] [FILE FILE ...]"
  opts.summary_indent = ' '*4

  opts.separator ""
  opts.separator "Command line options:"
  opts.separator ""

  opts.on("-i", "--input ARG", "Specify the input format: kramdown (default) or html") {|v| options[:input] = v}
  opts.on("-o", "--output ARG", "Specify the output format: html (default), kramdown or latex") {|v| format = v}

  opts.on("-v", "--version", "Show the version of kramdown") do
    puts Kramdown::VERSION
    exit
  end
  opts.on("-h", "--help", "Show the help") do
    puts opts.summarize('', 5, 72)
    exit
  end

  opts.separator ""
  opts.separator "kramdown options:"
  opts.separator ""

  Kramdown::Options.definitions.each do |n, definition|
    no = n.to_s.tr('_', '-')
    if definition.type == Kramdown::Options::Boolean
      opts.on("--[no-]#{no}") {|v| options[n] = Kramdown::Options.parse(n, v)}
    else
      type = definition.type
      type = String if type == Symbol || type == Object
      opts.on("--#{no} ARG", type) {|v| options[n] = Kramdown::Options.parse(n, v)}
    end

    definition.desc.split(/\n/).each do |line|
      opts.separator opts.summary_indent + ' '*6 + line
    end
    opts.separator ''
  end

end.parse!

begin
  doc = Kramdown::Document.new(ARGF.read, options)
  puts doc.send("to_#{format}")
  doc.warnings.each {|warn| $stderr.puts "Warning: #{warn}"}
rescue Kramdown::Error => e
  $stderr.puts "Error: #{e.message}"
  exit(1)
end
